syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


/* An ObjectEntity identifies a unique object in s3. */
message ObjectEntity {

    /* the full s3 uri of the object in the objectstore. */
    string uri = 1;

    /* A fingerprint for the object, normally the md5 checksum of the object's contents. */
    string fingerprint = 2;
    
    /* The etag (typically md5 checksum of file contents) of the object as reported by S3 */
    string etag = 3;

}

/* AddObjectRequest contains the parameters needed to create an entry in the `mdl-object` DynamoDB table. */
message AddObjectRequest {

    reserved 1 to 2;
    reserved "uri", "fingerprint";

    /* The id of the MDL agent which generated the objects */
    string agentId = 3;

    /* uri and fingerprints of objects to be added to the object store */
    repeated ObjectEntity objects = 4;

    /* Start time of the related activity*/
    google.protobuf.Timestamp activity_start_time = 5;

}

/* ChkObjectRequest contains the parameters needed to look up an entry in the `mdl-object` DynamoDB table */
 message ChkObjectRequest {
    ObjectEntity object = 1;
}

/* ChkObjectResponse indicates to the client if an object exists or not. */
message ChkObjectResponse {
    bool exists = 1;
}

/* AddPlanRequest specifies attributes of a plan to try to add to the mdl-plan DynamoDB table. */
message AddPlanRequest {

    /* source_entity is the uri for the mdl object which triggered a plan to be formed. */
    string source_entity = 1;

    /* target_agent is the agent id of the agent who will receive this plan. */
    string target_agent = 2;

    /* if_modified_since is a control parameter which controls whether or not a plan is created.
     * See MetadataService.addPlan. */
    google.protobuf.Timestamp if_modified_since = 3;

    /* agent_id is the id of the agent which generated the plan*/
    string agent_id = 4;

    /* activity_start_time is the start time of the related activity */
    google.protobuf.Timestamp activity_start_time = 5;
}

/* AddPlanResponse indicates to the client whether or not a new entry has been created for the
 * arguments supplied via an AddPlanRequest. */
message AddPlanResponse {

    /* created is true iff, during a call to AddPlan, a new plan
     * was created (implying an "unfulfilled" plan) */
    bool created = 1;
}

// Decision generated by mdl-text-quality-agent
message TextQualityDecision {

    // Count of tokenized word
    int32 word_count = 1;

    // Pecentage of redacted text
    float redaction_score = 2;
}

// Decision generated by mdl-language-quality-agent
message LanguageQualityDecision {

    /* Confidence score of text is English
       Use a non standard name convention here to match
       the field name we already saved in metadata store
       If using json_format, need specify preserving_proto_field_name=True
    */
    float isEnglish_True_Score = 1;
}

// Decision generated by mdl-fs-product-classifier-agent
// SOON TO BE DEPRECIATED
message EDSFSProductClassfierDecision {

    /* Confidence score of FS product detected
       Use a non standard name convention here to match
       the field name we already saved in metadata store
       If using json_format, need specify preserving_proto_field_name=True
    */
    float isFS_True_Score = 1;
}

// Decision generated by mdl-fs-product-classifier-agent
message EDSFSProductClassifierDecision {

    /* Confidence score of FS product detected
       Use a non standard name convention here to match
       the field name we already saved in metadata store
       If using json_format, need specify preserving_proto_field_name=True
    */
    float isFS_True_Score = 1;
}

// Decision generated by the mdl-insurance-alert-classifier-agent
message EDSInsuranceAlertDecision {
    /* Boolean indicating whether the item is an insurance alert
    */
    bool is_alert = 1;
}

// Decision generated by the mdl-asset-creator-agent
message AssetCreatorDecision {
    string product_tagger_asset_id = 1;
}

// Decision generated by ML agents
message MDLDecision {
    // Reserved fields that get dropped
    reserved 4;
    reserved "feature_id";

    oneof decision {
        TextQualityDecision text_quality_decision = 1;
        LanguageQualityDecision language_quality_decision = 2;
        EDSFSProductClassfierDecision eds_fs_product_classifier_decision = 3;
        EDSInsuranceAlertDecision eds_insurance_alert_decision = 5;
        AssetCreatorDecision asset_creator_decision = 6;
        EDSFSProductClassifierDecision eds_fin_serv_product_classifier_decision = 7;
    }
}

// Request to add decision into mdl-decision table
message AddDecisionRequest {

    // Reserved fields that get dropped
    reserved 1;
    reserved "decision";

    // A wrapper around MDLDecision and associated feature ids
    message MDLDecisionWithFeatureIDs {
        // Decision to add
        MDLDecision decision = 1;

        // Array of feature ids used to generate the decision
        repeated string feature_id = 2;
    }

    // List of MDL decisions to add
    repeated MDLDecisionWithFeatureIDs decision_with_feature_ids = 5;

    // Timestamp for when the associated activity started
    google.protobuf.Timestamp activity_start_time = 2;

    /* agent_id is the id of the agent which generated the decision */
    string agent_id = 3;

    // PROV fields for list of entities the decisions was derived from
    repeated string was_derived_from = 4;
}

/* Request decision data from the metastore for the
 * decision id generated by the message fields.
 */
message GetDecisionRequest {

    /* a mdl-decision is identified by the ids in
     * its feature-set as well as the id of the agent
     * which made the decision.
     */
    repeated string feature_id = 1;
    string agent_id = 2;
}

message GetDecisionResponse {
    bool found = 1;
    MDLDecision decision = 2;
}

/* Request agent configuration for the agent
 * with the given ID
 */
message GetAgentConfigRequest {
    string agent_id = 1;
}

/* A GetAgentConfigResponse holds global configuration details
 * for a particular agent.
 */
message GetAgentConfigResponse {
    // True iff the agent exists in the agent-config table.
    bool found = 5;

    // The url of an agent's input SQS.
    string input_queue_url = 1;

    /* The protobuf message type representing the decisions
     * made by this agent. ex: mdl_metadata.metaservice_pb2.TextQualityDecision
     */
    string decision_proto_type = 2;

    /* The field under mdl_metadata.metaservice.MDLDecision to put this agents'
     * decisions under. Ex. for text quality: text_quality_decision
     */
    string decision_proto_field = 3;

    /* Set "true" to tell agents to use the decisions' fieldnames
     * verbatim when serializing a decision protobuf to JSON.
     */
    bool preserve_proto_field_name = 4;
}

/* Request to add a message  to the `mdl-message` Dynamodb table */
/* Request with the sns_message received and what agent received it. */
message AddMessageRequest {
    string agent_id = 1;
    string sns_message = 2;
    google.protobuf.Timestamp activity_start_time = 3;
    
}

/* Response indicating if message was added to `mdl-message`. false means
 * it already exists */
message AddMessageResponse {
    bool created = 1;
}

service MetadataService {

    /* AddObject creates a `mdl-object` entry based on the parameters
     * given in the input message. It also generates a `mdl-activity`,
     * representing the creation of the object. */
    rpc AddObject (AddObjectRequest) returns (google.protobuf.Empty);

    /* AddObjectStream generates one `mdl-object` entry for each
     * `AddObjectRequest` in the input stream. A single `mdl-activity` is
     * created and associated with all objects created in this request. */
    rpc AddObjectStream (stream AddObjectRequest) returns (google.protobuf.Empty);
    
    /* ChkObject looks for an `mdl-object` entry based on the parameters given
    * in the input message. Returns true if found. */
    rpc ChkObject (ChkObjectRequest) returns (ChkObjectResponse);

    /* AddPlan creates a `mdl-plan` entry with fields from the given AddObjectRequest.
     * If a plan with matching fingerprint (source entity & target) exists whose
     * last-modified time is after AddPlanRequest.if_modified_since, no plan is created.
     * and AddPlanResponse.created is set to false. */
    rpc AddPlan (AddPlanRequest) returns (AddPlanResponse);

    /* GetDecision returns data for the decision with id generated by the input fields
     * (feature_id(s) and agent_id). If no decision is found, the reponse indicates
     * so with GetDecisionResponse->found == False */
    rpc GetDecision(GetDecisionRequest) returns (GetDecisionResponse);

    /* AddDecision creates records in mdl-decision for multiple decisions
       all decisions should be associated with same activity, which will
       be created by the rpc method */
    rpc AddDecision (AddDecisionRequest) returns (google.protobuf.Empty);

    /* GetAgentConfig searches the shared-agent-config table for the requested agent.
     * if the agent exists, the config is returned as an AgentConfig protobuf, with found
     * set to true. if the agent doesn't exist, found is set to false. */
    rpc GetAgentConfig (GetAgentConfigRequest) returns (GetAgentConfigResponse);

    /* AddObject creates a `mdl-message` entry from the input message if it doesn't already exist.
    * Also generates a `mdl-activity` representing the creation of the message */
    rpc AddMessage (AddMessageRequest) returns (AddMessageResponse);


}
